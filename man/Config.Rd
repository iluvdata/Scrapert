% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Config.R
\name{Config}
\alias{Config}
\title{Scrapert Config}
\description{
Holds configuration for Scrapert
}
\examples{

## ------------------------------------------------
## Method `Config$new`
## ------------------------------------------------

# config <- Config$new("config.yml")

## ------------------------------------------------
## Method `Config$loadFromFile`
## ------------------------------------------------

# config$loadFromFile("config.yml")

## ------------------------------------------------
## Method `Config$saveToFile`
## ------------------------------------------------

# config$saveToFile("config.yml")

## ------------------------------------------------
## Method `Config$print`
## ------------------------------------------------

config

## ------------------------------------------------
## Method `Config$addConfig`
## ------------------------------------------------

config$addConfig(
  xpertTZ = list(label="Timezone of Xpert Machine", required = TRUE, opts = OlsonNames)
)
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{config}}{\code{list} holding the configuration.  Access with \code{config$config$xpertTZ$value}}

\item{\code{xpert}}{\code{list} holding the xpert interpretation values.  Access with \code{config$xpert["16"]$label}}

\item{\code{modules}}{\code{list} holding R6 module class (Auth, PID, CRF).  Access with \code{config$modules$Auth$checkAuth(res,req)}}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Config-new}{\code{Config$new()}}
\item \href{#method-Config-loadFromFile}{\code{Config$loadFromFile()}}
\item \href{#method-Config-saveToFile}{\code{Config$saveToFile()}}
\item \href{#method-Config-getNestedList}{\code{Config$getNestedList()}}
\item \href{#method-Config-yaml}{\code{Config$yaml()}}
\item \href{#method-Config-print}{\code{Config$print()}}
\item \href{#method-Config-getWebConfig}{\code{Config$getWebConfig()}}
\item \href{#method-Config-configNeeded}{\code{Config$configNeeded()}}
\item \href{#method-Config-saveWebConfig}{\code{Config$saveWebConfig()}}
\item \href{#method-Config-addConfig}{\code{Config$addConfig()}}
\item \href{#method-Config-clone}{\code{Config$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Config-new"></a>}}
\if{latex}{\out{\hypertarget{method-Config-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Config$new(file)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{file or path to yaml config file}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# config <- Config$new("config.yml")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Config-loadFromFile"></a>}}
\if{latex}{\out{\hypertarget{method-Config-loadFromFile}{}}}
\subsection{Method \code{loadFromFile()}}{
load values from a yaml file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Config$loadFromFile(file)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{file or path to yaml config file}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# config$loadFromFile("config.yml")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Config-saveToFile"></a>}}
\if{latex}{\out{\hypertarget{method-Config-saveToFile}{}}}
\subsection{Method \code{saveToFile()}}{
Save current configuration to yaml file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Config$saveToFile(file)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{file or path to yaml config file}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# config$saveToFile("config.yml")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Config-getNestedList"></a>}}
\if{latex}{\out{\hypertarget{method-Config-getNestedList}{}}}
\subsection{Method \code{getNestedList()}}{
Get nested list of values. Replaces  opts functions with strings and module classes with names of the class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Config$getNestedList()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
list() with xpert and module lists as top level items
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Config-yaml"></a>}}
\if{latex}{\out{\hypertarget{method-Config-yaml}{}}}
\subsection{Method \code{yaml()}}{
get nest yaml
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Config$yaml(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{arguments passed to \link[yaml]{as.yaml}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
character string of config in yaml
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Config-print"></a>}}
\if{latex}{\out{\hypertarget{method-Config-print}{}}}
\subsection{Method \code{print()}}{
print to terminal in yaml
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Config$print()}\if{html}{\out{</div>}}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{config
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Config-getWebConfig"></a>}}
\if{latex}{\out{\hypertarget{method-Config-getWebConfig}{}}}
\subsection{Method \code{getWebConfig()}}{
get nested lists for json serialization
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Config$getWebConfig()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
nested lists of items
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Config-configNeeded"></a>}}
\if{latex}{\out{\hypertarget{method-Config-configNeeded}{}}}
\subsection{Method \code{configNeeded()}}{
a setting is needed
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Config$configNeeded()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{TRUE} if a setting is needed
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Config-saveWebConfig"></a>}}
\if{latex}{\out{\hypertarget{method-Config-saveWebConfig}{}}}
\subsection{Method \code{saveWebConfig()}}{
Save the web configure (form data)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Config$saveWebConfig(setting)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{setting}}{list of settings posted via ajax}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Config-addConfig"></a>}}
\if{latex}{\out{\hypertarget{method-Config-addConfig}{}}}
\subsection{Method \code{addConfig()}}{
Add a configuration item to the stack or add metadata to existing entry
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Config$addConfig(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{named list to add (see examples)}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{config$addConfig(
  xpertTZ = list(label="Timezone of Xpert Machine", required = TRUE, opts = OlsonNames)
)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Config-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Config-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Config$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
